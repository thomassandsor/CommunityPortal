import { useSignIn, useSignUp } from '@clerk/clerk-react'
import { useState, useEffect } from 'react'

// Shared Verification Form - Used by BOTH sign-in and sign-up flows
function VerificationForm({ 
    email, 
    code, 
    setCode, 
    onVerify, 
    onResend, 
    onBack, 
    loading, 
    error, 
    resending, 
    resendCooldown, 
    resendSuccess 
}) {
    return (
        <div className="space-y-4">
            <div className="text-center mb-4">
                <h4 className="text-lg font-medium text-blue-900 mb-1">Check your email</h4>
                <p className="text-sm text-blue-700">
                    We sent a verification code to {email}
                </p>
            </div>
            
            <div>
                <label htmlFor="code" className="block text-sm font-medium text-blue-900 mb-2">
                    Verification Code
                </label>
                <input
                    id="code"
                    type="text"
                    value={code}
                    onChange={(e) => setCode(e.target.value)}
                    placeholder="Enter 6-digit code"
                    className="w-full px-4 py-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-center text-lg font-mono"
                    onKeyPress={(e) => e.key === 'Enter' && code.length === 6 && onVerify()}
                    maxLength={6}
                />
            </div>
            
            {error && (
                <div className="text-red-700 text-sm bg-red-50 border border-red-200 p-3 rounded-lg">
                    {error}
                </div>
            )}
            
            {resendSuccess && (
                <div className="text-green-700 text-sm bg-green-50 border border-green-200 p-3 rounded-lg">
                    ✅ New verification code sent! Check your email.
                </div>
            )}
            
            <button
                onClick={onVerify}
                disabled={code.length !== 6 || loading}
                className="w-full flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors duration-200 font-medium"
            >
                {loading ? (
                    <>
                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Verifying...
                    </>
                ) : (
                    <>
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Verify Code
                    </>
                )}
            </button>
            
            <div className="flex space-x-2">
                <button
                    onClick={onResend}
                    disabled={resending || resendCooldown > 0}
                    className="flex-1 flex items-center justify-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:bg-gray-50 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors duration-200 text-sm"
                >
                    {resending ? (
                        <>
                            <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Sending...
                        </>
                    ) : resendCooldown > 0 ? (
                        `Resend in ${resendCooldown}s`
                    ) : (
                        <>
                            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            Resend Code
                        </>
                    )}
                </button>
                <button
                    onClick={onBack}
                    className="flex-1 text-blue-600 text-sm hover:text-blue-800 transition-colors py-2"
                >
                    ← Back to email entry
                </button>
            </div>
        </div>
    )
}

// Custom Personal Login Button (Google/Gmail)
function PersonalLoginButton() {
    const { signIn } = useSignIn()

    const handleGoogleSignIn = async () => {
        try {
            // Clear any previous auth method marker to ensure create mode
            sessionStorage.removeItem('auth_method')
            
            await signIn.authenticateWithRedirect({
                strategy: "oauth_google",
                redirectUrl: "/welcome",
                redirectUrlComplete: "/welcome"
            })
        } catch (error) {
            console.error('Google sign-in error:', error)
        }
    }

    return (
        <button
            onClick={handleGoogleSignIn}
            className="w-full flex items-center justify-center px-4 py-3 border border-green-300 rounded-lg bg-white hover:bg-green-50 transition-colors duration-200 group"
        >
            <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24">
                <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            <span className="text-green-900 font-medium group-hover:text-green-800">
                Continue with Google
            </span>
        </button>
    )
}

// Unified Email Authentication - Sign-in UX, handles both flows internally
function EmailSignInFlow() {
    const { signIn, setActive, isLoaded: signInLoaded } = useSignIn()
    const { signUp, setActive: setActiveSignUp, isLoaded: signUpLoaded } = useSignUp()
    const [email, setEmail] = useState('')
    const [code, setCode] = useState('')
    const [loading, setLoading] = useState(false)
    const [verifying, setVerifying] = useState(false)
    const [usingSignUp, setUsingSignUp] = useState(false) // Internal state - not shown to user
    const [error, setError] = useState('')
    const [resending, setResending] = useState(false)
    const [resendCooldown, setResendCooldown] = useState(0)
    const [resendSuccess, setResendSuccess] = useState(false)
    
    const isLoaded = signInLoaded && signUpLoaded
    
    // Load Cloudflare Turnstile for bot protection
    useEffect(() => {
        // Only load Turnstile if not already loaded
        if (typeof window.turnstile === 'undefined' && !document.querySelector('script[src*="challenges.cloudflare.com"]')) {
            const script = document.createElement('script')
            script.src = 'https://challenges.cloudflare.com/turnstile/v0/api.js'
            script.async = true
            script.defer = true
            document.head.appendChild(script)
        }
    }, [])
    
    const handleEmailSubmit = async () => {
        if (!isLoaded || !email) return
        
        setLoading(true)
        setError('')
        
        try {
            // Set auth method for SmartContactWrapper
            sessionStorage.setItem('auth_method', 'email_verification')
            
            // Try sign-in first (existing users get better UX)
            try {
                const signInAttempt = await signIn.create({ identifier: email })
                
                const emailCodeFactor = signInAttempt.supportedFirstFactors?.find(
                    factor => factor.strategy === 'email_code'
                )
                
                if (emailCodeFactor) {
                    await signIn.prepareFirstFactor({
                        strategy: 'email_code',
                        emailAddressId: emailCodeFactor.emailAddressId,
                    })
                    
                    // Existing user - use sign-in
                    setUsingSignUp(false)
                    setVerifying(true)
                    setLoading(false)
                    return
                }
                
            } catch (signInError) {
                // Expected for new users - fall back to sign-up
                if (signInError.status === 422 || 
                    (signInError.errors && signInError.errors[0]?.code === 'form_identifier_not_found')) {
                    
                    // New user - create sign-up account
                    await signUp.create({ emailAddress: email })
                    await signUp.prepareEmailAddressVerification({ strategy: 'email_code' })
                    
                    setUsingSignUp(true)
                    setVerifying(true)
                    setLoading(false)
                    return
                } else {
                    throw signInError // Unexpected error
                }
            }
            
        } catch (err) {
            console.error('Email authentication error:', err)
            
            if (err.errors && err.errors[0]) {
                const clerkError = err.errors[0]
                switch (clerkError.code) {
                    case 'form_param_format_invalid':
                        setError('Please enter a valid email address.')
                        break
                    default:
                        setError(clerkError.longMessage || clerkError.message || 'Unable to send verification code.')
                }
            } else {
                setError('Unable to send verification code. Please try again.')
            }
            setLoading(false)
        }
    }
    
    const handleCodeVerification = async () => {
        if (!isLoaded || !code) return
        
        setLoading(true)
        setError('')
        
        try {
            if (usingSignUp) {
                // Handle sign-up verification (new users)
                const signUpAttempt = await signUp.attemptEmailAddressVerification({
                    code: code,
                })
                
                if (signUpAttempt.status === 'complete') {
                    await setActiveSignUp({
                        session: signUpAttempt.createdSessionId,
                        navigate: () => {
                            // Prevent Clerk's default navigation
                            window.location.href = '/welcome'
                        },
                    })
                } else {
                    throw new Error('Sign-up verification incomplete.')
                }
            } else {
                // Handle sign-in verification (existing users)
                const signInAttempt = await signIn.attemptFirstFactor({
                    strategy: 'email_code',
                    code: code,
                })
                
                if (signInAttempt.status === 'complete') {
                    await setActive({
                        session: signInAttempt.createdSessionId,
                        navigate: async ({ session }) => {
                            if (session?.currentTask) {
                                return
                            }
                            window.location.href = '/welcome'
                        },
                    })
                } else {
                    throw new Error('Sign-in verification incomplete.')
                }
            }
            
        } catch (err) {
            console.error('Code verification error:', err)
            
            if (err.errors && err.errors[0]) {
                const clerkError = err.errors[0]
                switch (clerkError.code) {
                    case 'form_code_incorrect':
                        setError('Incorrect verification code. Please check your email and try again.')
                        break
                    case 'verification_expired':
                        setError('Verification code expired. Please request a new code.')
                        break
                    default:
                        setError(clerkError.longMessage || clerkError.message || 'Invalid verification code. Please try again.')
                }
            } else {
                setError(err.message || 'Invalid verification code. Please try again.')
            }
            setLoading(false)
        }
    }

    const handleResendCode = async () => {
        if (!isLoaded || resending || resendCooldown > 0) return
        
        // Resending verification code
        setResending(true)
        setError('')
        
        try {
            if (usingSignUp) {
                // Resend for sign-up flow (new users)
                await signUp.prepareEmailAddressVerification({
                    strategy: 'email_code',
                })
            } else {
                // Resend for sign-in flow (existing users)
                const emailCodeFactor = signIn.supportedFirstFactors?.find(
                    factor => factor.strategy === 'email_code'
                )
                
                if (emailCodeFactor) {
                    await signIn.prepareFirstFactor({
                        strategy: 'email_code',
                        emailAddressId: emailCodeFactor.emailAddressId,
                    })
                } else {
                    throw new Error('Email code verification not available')
                }
            }
            
            // Code resent successfully
            
            // Show success message
            setResendSuccess(true)
            setTimeout(() => setResendSuccess(false), 3000)
            
            // Start 30-second cooldown
            setResendCooldown(30)
            const interval = setInterval(() => {
                setResendCooldown(prev => {
                    if (prev <= 1) {
                        clearInterval(interval)
                        return 0
                    }
                    return prev - 1
                })
            }, 1000)
            
        } catch (err) {
            // Handle resend errors
            
            if (err.errors && err.errors[0]) {
                const clerkError = err.errors[0]
                setError(`Failed to resend: ${clerkError.longMessage || clerkError.message}`)
            } else {
                setError(`Failed to resend verification code: ${err.message || 'Please try again.'}`)
            }
        } finally {
            setResending(false)
        }
    }
    
    if (verifying) {
        // Use shared verification form - IDENTICAL for sign-in and sign-up
        return (
            <VerificationForm
                email={email}
                code={code}
                setCode={setCode}
                onVerify={handleCodeVerification}
                onResend={handleResendCode}
                onBack={() => {
                    setVerifying(false)
                    setCode('')
                    setError('')
                    setResendCooldown(0)
                }}
                loading={loading}
                error={error}
                resending={resending}
                resendCooldown={resendCooldown}
                resendSuccess={resendSuccess}
            />
        )
    }
    
    
    // Show email entry form
    return (
        <div className="space-y-4">
            <div>
                <label htmlFor="email" className="block text-sm font-medium text-blue-900 mb-2">
                    Email Address
                </label>
                <input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Enter your email address"
                    className="w-full px-4 py-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    onKeyPress={(e) => e.key === 'Enter' && handleEmailSubmit()}
                />
            </div>
            {/* CAPTCHA container for Clerk's Turnstile - hidden unless needed */}
            <div 
                id="clerk-captcha" 
                style={{ 
                    display: 'none'
                }}
            >
            </div>
            {error && (
                <div className="text-red-600 text-sm bg-red-50 p-3 rounded-lg">
                    {error}
                </div>
            )}
                
                <div>
                    <label htmlFor="code" className="block text-sm font-medium text-blue-900 mb-2">
                        Verification Code
                    </label>
                    <input
                        id="code"
                        type="text"
                        value={code}
                        onChange={(e) => setCode(e.target.value)}
                        placeholder="Enter 6-digit code"
                        className="w-full px-4 py-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-center text-lg font-mono"
                        onKeyPress={(e) => e.key === 'Enter' && handleCodeVerification()}
                        maxLength={6}
                    />
                </div>
                
                {error && (
                    <div className="text-red-700 text-sm bg-red-50 border border-red-200 p-3 rounded-lg">
                        {error}
                    </div>
                )}
                
                {resendSuccess && (
                    <div className="text-green-700 text-sm bg-green-50 border border-green-200 p-3 rounded-lg">
                        ✅ New verification code sent! Check your email.
                    </div>
                )}
                
                <button
                    onClick={handleCodeVerification}
                    disabled={!code || code.length !== 6 || loading}
                    className="w-full flex items-center justify-center px-4 py-3 text-white rounded-lg transition-colors duration-200 font-medium text-lg"
                    style={{
                        backgroundColor: (!code || code.length !== 6 || loading) ? '#9CA3AF' : '#2563EB',
                        border: '2px solid #1E40AF',
                        minHeight: '56px'
                    }}
                >
                    {loading ? (
                        <>
                            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Verifying...
                        </>
                    ) : (
                        <>
                            <svg className="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24" strokeWidth={2}>
                                <path strokeLinecap="round" strokeLinejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span className="text-lg font-bold">VERIFY CODE</span>
                        </>
                    )}
                </button>
                
                <div className="flex space-x-2">
                    <button
                        onClick={handleResendCode}
                        disabled={resending || resendCooldown > 0}
                        className="flex-1 flex items-center justify-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 disabled:bg-gray-50 disabled:text-gray-400 disabled:cursor-not-allowed transition-colors duration-200 text-sm"
                    >
                        {resending ? (
                            <>
                                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Sending...
                            </>
                        ) : resendCooldown > 0 ? (
                            `Resend in ${resendCooldown}s`
                        ) : (
                            <>
                                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                </svg>
                                Resend Code
                            </>
                        )}
                    </button>
                    <button
                        onClick={() => {
                            setVerifying(false)
                            setCode('')
                            setError('')
                            setResendCooldown(0)
                        }}
                        className="flex-1 text-blue-600 text-sm hover:text-blue-800 transition-colors py-2"
                    >
                        ← Back to email entry
                    </button>
                </div>
            </div>
        )
    }
    
    // Show email entry form
    return (
        <div className="space-y-4">
            <div>
                <label htmlFor="email" className="block text-sm font-medium text-blue-900 mb-2">
                    Email Address
                </label>
                <input
                    id="email"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    placeholder="Enter your email address"
                    className="w-full px-4 py-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    onKeyPress={(e) => e.key === 'Enter' && handleEmailSubmit()}
                />
            </div>
            {/* CAPTCHA container for Clerk's Turnstile - hidden unless needed */}
            <div 
                id="clerk-captcha" 
                style={{ 
                    display: 'none'
                }}
            >
            </div>
            {error && (
                <div className="text-red-600 text-sm bg-red-50 p-3 rounded-lg">
                    {error}
                </div>
            )}
            <button
                onClick={handleEmailSubmit}
                disabled={!email || loading}
                className="w-full flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-300 disabled:cursor-not-allowed transition-colors duration-200"
            >
                {loading ? (
                    <>
                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Sending Code...
                    </>
                ) : (
                    <>
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                        </svg>
                        Send Verification Code
                    </>
                )}
            </button>
            <p className="text-xs text-blue-600 text-center">
                We'll send a 6-digit code to your email
            </p>
            <p className="text-xs text-gray-500 text-center mt-2">
                Works for both new and existing accounts
            </p>
        </div>
    )
}

function Landing() {
    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
            {/* Header */}
            <header className="bg-white shadow-sm">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex justify-between items-center py-4">
                        <div className="flex items-center">
                            <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center mr-3">
                                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                </svg>
                            </div>
                            <h1 className="text-xl font-bold text-gray-900">Community Portal</h1>
                        </div>
                        <div className="text-sm text-gray-500">
                            Open Source Demo
                        </div>
                    </div>
                </div>
            </header>

            {/* Main Content */}
            <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
                <div className="grid lg:grid-cols-2 gap-12 items-center">
                    {/* Left Side - Welcome Content */}
                    <div>
                        <div className="mb-8">
                            <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight">
                                Welcome to the
                                <span className="block text-blue-600">Community Portal</span>
                            </h2>
                            <p className="text-xl text-gray-600 leading-relaxed mb-6">
                                A modern, secure portal demonstrating React integration with Microsoft Dataverse.
                                Sign in with your work account or personal email to get started.
                            </p>
                        </div>

                        {/* Features */}
                        <div className="space-y-4 mb-8">
                            <div className="flex items-start">
                                <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center mr-4 mt-1 flex-shrink-0">
                                    <svg className="w-3 h-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                                    </svg>
                                </div>
                                <div>
                                    <h3 className="font-semibold text-gray-900">Secure Authentication</h3>
                                    <p className="text-gray-600">Clerk.dev for simple and secure logins</p>
                                </div>
                            </div>

                            <div className="flex items-start">
                                <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center mr-4 mt-1 flex-shrink-0">
                                    <svg className="w-3 h-3 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                                    </svg>
                                </div>
                                <div>
                                    <h3 className="font-semibold text-gray-900">Dataverse Integration</h3>
                                    <p className="text-gray-600">Securely manage your contact information in Microsoft Dataverse</p>
                                </div>
                            </div>

                            <div className="flex items-start">
                                <div className="w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center mr-4 mt-1 flex-shrink-0">
                                    <svg className="w-3 h-3 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                                    </svg>
                                </div>
                                <div>
                                    <h3 className="font-semibold text-gray-900">Open Source</h3>
                                    <p className="text-gray-600">Community-driven starter template for learning and extension</p>
                                    <div className="mt-3">
                                        <a
                                            href="https://github.com/thomassandsor/CommunityPortal"
                                            target="_blank"
                                            rel="noopener noreferrer"
                                            className="inline-flex items-center px-4 py-2 bg-gray-900 text-white rounded-lg text-sm font-medium hover:bg-gray-800 transition-colors"
                                        >
                                            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                                                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                                            </svg>
                                            Open Source
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Tech Stack */}
                        <div className="bg-gray-50 rounded-lg p-6">
                            <h4 className="font-semibold text-gray-900 mb-3">Built with modern technology:</h4>
                            <div className="flex flex-wrap gap-2">
                                {['React 18', 'Vite', 'Tailwind CSS', 'Clerk Auth', 'Netlify Functions', 'Microsoft Dataverse'].map((tech) => (
                                    <span key={tech} className="px-3 py-1 bg-white rounded-full text-sm text-gray-700 border">
                                        {tech}
                                    </span>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Right Side - Sign In */}
                    <div className="flex justify-center">
                        <div className="w-full max-w-md">
                            <div className="text-center mb-6">
                                <h3 className="text-2xl font-bold text-gray-900 mb-2">Get Started</h3>
                                <p className="text-gray-600">Choose your sign-in method</p>
                            </div>

                            <div className="space-y-4">
                                {/* Personal Section - Top */}
                                <div className="bg-green-50 rounded-lg p-6 border border-green-200">
                                    <h4 className="text-lg font-semibold text-green-900 mb-2 flex items-center">
                                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                        Personal Account
                                    </h4>
                                    <p className="text-green-700 text-sm mb-4">Sign in with your Gmail account</p>
                                    <PersonalLoginButton />
                                </div>

                                {/* Divider */}
                                <div className="relative">
                                    <div className="absolute inset-0 flex items-center">
                                        <div className="w-full border-t border-gray-300" />
                                    </div>
                                    <div className="relative flex justify-center text-sm">
                                        <span className="px-2 bg-white text-gray-500">OR</span>
                                    </div>
                                </div>

                                {/* Email Section - Bottom */}
                                <div className="bg-blue-50 rounded-lg p-6 border border-blue-200">
                                    <h4 className="text-lg font-semibold text-blue-900 mb-2 flex items-center">
                                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                        </svg>
                                        Email Account
                                    </h4>
                                    <p className="text-blue-700 text-sm mb-4">Sign in with verification code</p>
                                    <EmailSignInFlow />
                                </div>
                            </div>

                            <div className="mt-6 text-center">
                                <p className="text-sm text-gray-500">
                                    This demo uses Service Principal authentication for secure,
                                    <br />
                                    production-ready integration with Microsoft Dataverse.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

            </main>
        </div>
    )
}

export default Landing
